//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.0
//     from Assets/Settings/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @GameControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""51a105cd-134c-40ad-af3a-55e86f6bed48"",
            ""actions"": [
                {
                    ""name"": ""Close Menu"",
                    ""type"": ""Button"",
                    ""id"": ""097370a2-36a4-4a23-bfe8-65f9e7a62ce6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3dc86978-f071-4a16-9db4-bbb295c82dec"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""42cb9a7d-af2b-4ee6-8f13-999f33097ed5"",
            ""actions"": [
                {
                    ""name"": ""Upgrade"",
                    ""type"": ""Button"",
                    ""id"": ""89ab53a3-b845-4c06-931d-a8d58d372c74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Solar Panel"",
                    ""type"": ""Button"",
                    ""id"": ""04f7991b-50ab-4dc4-8fbd-0f535967a905"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape To Menu"",
                    ""type"": ""Button"",
                    ""id"": ""79084552-0a3c-4162-a177-99520d8a6d2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d12587b6-0635-4b4a-a174-fa333eff8e77"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Upgrade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f48d0b3-39e5-4834-a120-1eee1b7997e6"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Solar Panel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a743088-1535-4c30-af52-7162c65fcf01"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Solar Panel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab291bd4-9f0d-44da-a691-1276ce520eba"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape To Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Upgrade"",
            ""id"": ""5ca97cbc-c74d-42ac-abcd-19a468211f90"",
            ""actions"": [
                {
                    ""name"": ""Close Menu"",
                    ""type"": ""Button"",
                    ""id"": ""a464c86c-3067-4064-abf2-dbcfb1b9f118"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d0ad54c-aead-4496-8db7-f2873b80fdd9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_CloseMenu = m_Menu.FindAction("Close Menu", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Upgrade = m_Player.FindAction("Upgrade", throwIfNotFound: true);
        m_Player_SolarPanel = m_Player.FindAction("Solar Panel", throwIfNotFound: true);
        m_Player_EscapeToMenu = m_Player.FindAction("Escape To Menu", throwIfNotFound: true);
        // Upgrade
        m_Upgrade = asset.FindActionMap("Upgrade", throwIfNotFound: true);
        m_Upgrade_CloseMenu = m_Upgrade.FindAction("Close Menu", throwIfNotFound: true);
    }

    ~@GameControls()
    {
        Debug.Assert(!m_Menu.enabled, "This will cause a leak and performance issues, GameControls.Menu.Disable() has not been called.");
        Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, GameControls.Player.Disable() has not been called.");
        Debug.Assert(!m_Upgrade.enabled, "This will cause a leak and performance issues, GameControls.Upgrade.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_CloseMenu;
    public struct MenuActions
    {
        private @GameControls m_Wrapper;
        public MenuActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseMenu => m_Wrapper.m_Menu_CloseMenu;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @CloseMenu.started += instance.OnCloseMenu;
            @CloseMenu.performed += instance.OnCloseMenu;
            @CloseMenu.canceled += instance.OnCloseMenu;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @CloseMenu.started -= instance.OnCloseMenu;
            @CloseMenu.performed -= instance.OnCloseMenu;
            @CloseMenu.canceled -= instance.OnCloseMenu;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Upgrade;
    private readonly InputAction m_Player_SolarPanel;
    private readonly InputAction m_Player_EscapeToMenu;
    public struct PlayerActions
    {
        private @GameControls m_Wrapper;
        public PlayerActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Upgrade => m_Wrapper.m_Player_Upgrade;
        public InputAction @SolarPanel => m_Wrapper.m_Player_SolarPanel;
        public InputAction @EscapeToMenu => m_Wrapper.m_Player_EscapeToMenu;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Upgrade.started += instance.OnUpgrade;
            @Upgrade.performed += instance.OnUpgrade;
            @Upgrade.canceled += instance.OnUpgrade;
            @SolarPanel.started += instance.OnSolarPanel;
            @SolarPanel.performed += instance.OnSolarPanel;
            @SolarPanel.canceled += instance.OnSolarPanel;
            @EscapeToMenu.started += instance.OnEscapeToMenu;
            @EscapeToMenu.performed += instance.OnEscapeToMenu;
            @EscapeToMenu.canceled += instance.OnEscapeToMenu;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Upgrade.started -= instance.OnUpgrade;
            @Upgrade.performed -= instance.OnUpgrade;
            @Upgrade.canceled -= instance.OnUpgrade;
            @SolarPanel.started -= instance.OnSolarPanel;
            @SolarPanel.performed -= instance.OnSolarPanel;
            @SolarPanel.canceled -= instance.OnSolarPanel;
            @EscapeToMenu.started -= instance.OnEscapeToMenu;
            @EscapeToMenu.performed -= instance.OnEscapeToMenu;
            @EscapeToMenu.canceled -= instance.OnEscapeToMenu;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Upgrade
    private readonly InputActionMap m_Upgrade;
    private List<IUpgradeActions> m_UpgradeActionsCallbackInterfaces = new List<IUpgradeActions>();
    private readonly InputAction m_Upgrade_CloseMenu;
    public struct UpgradeActions
    {
        private @GameControls m_Wrapper;
        public UpgradeActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseMenu => m_Wrapper.m_Upgrade_CloseMenu;
        public InputActionMap Get() { return m_Wrapper.m_Upgrade; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UpgradeActions set) { return set.Get(); }
        public void AddCallbacks(IUpgradeActions instance)
        {
            if (instance == null || m_Wrapper.m_UpgradeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UpgradeActionsCallbackInterfaces.Add(instance);
            @CloseMenu.started += instance.OnCloseMenu;
            @CloseMenu.performed += instance.OnCloseMenu;
            @CloseMenu.canceled += instance.OnCloseMenu;
        }

        private void UnregisterCallbacks(IUpgradeActions instance)
        {
            @CloseMenu.started -= instance.OnCloseMenu;
            @CloseMenu.performed -= instance.OnCloseMenu;
            @CloseMenu.canceled -= instance.OnCloseMenu;
        }

        public void RemoveCallbacks(IUpgradeActions instance)
        {
            if (m_Wrapper.m_UpgradeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUpgradeActions instance)
        {
            foreach (var item in m_Wrapper.m_UpgradeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UpgradeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UpgradeActions @Upgrade => new UpgradeActions(this);
    public interface IMenuActions
    {
        void OnCloseMenu(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnUpgrade(InputAction.CallbackContext context);
        void OnSolarPanel(InputAction.CallbackContext context);
        void OnEscapeToMenu(InputAction.CallbackContext context);
    }
    public interface IUpgradeActions
    {
        void OnCloseMenu(InputAction.CallbackContext context);
    }
}
